# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.
from typing import List


def get_sum_of_even_fibonacci_under(limit: int) -> int:
    list_fib = get_even_fibonacci_list_under(limit)
    return sum(list_fib)


def get_even_fibonacci_list_under(limit: int) -> List[int]:
    if limit < 2:
        raise ValueError("Request value must be over 1")

    last = 1
    current = 1
    fib_list = []
    while current < limit:
        if current % 2 == 0:
            fib_list.append(current)
        temp = get_next_fibonacci_number(last, current)
        last = current
        current = temp
    return fib_list


def get_next_fibonacci_number(last: int, current: int) -> int:
    return last + current


if __name__ == '__main__':
    print(get_sum_of_even_fibonacci_under(4000000))
